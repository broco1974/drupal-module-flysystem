<?php

/**
 * @file
 * Provides access to various filesystem backends using Flysystem.
 */

/**
 * Implements hook_menu().
 */
function flysystem_menu() {
  $items = array();

  $items['_flysystem/%'] = array(
    'title' => 'Flysystem file download',
    'page callback' => 'file_download',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['_flysystem/%/styles/%image_style'] = array(
    'title' => 'Generate image style',
    'page callback' => 'image_style_deliver',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_stream_wrappers().
 */
function flysystem_stream_wrappers() {
  $wrappers = array();

  // This hook is called before hook_init(), so we have to manually register
  // the autoloader. We also need to handle module upgrades where
  // composer_manager might not be enabled yet.
  if (!module_exists('composer_manager')) {
    return $wrappers;
  }

  // If the module has been enabled, but the user didn't update composer
  // libraries, prevent failing entirely.
  try {
    composer_manager_register_autoloader();
  }
  catch (\RuntimeException $e) {
    watchdog('flysystem', 'The Composer autoloader could not be registered. Run drush composer-rebuild and drush composer-manager update to update your vendor directory.');
    watchdog_exception('flysystem', $e);
    return $wrappers;
  }

  if (!class_exists('Drupal\flysystem\FlysystemBridge')) {
    watchdog('flysystem', 'The Flysystem StreamWrapper class is missing. Make sure all module updates have run. Otherwise, run drush composer-rebuild and drush composer-manager update to update your vendor directory.');
    return $wrappers;
  }

  $schemes = variable_get('flysystem', array());

  foreach (array_keys($schemes) as $scheme) {
    $wrappers[$scheme] = array(
      'name' => t('Flysystem: @scheme', array('@scheme' => $scheme)),
      'class' => 'Drupal\flysystem\FlysystemBridge',
      'description' => t('Flysystem: @scheme', array('@scheme' => $scheme)),
      'type' => STREAM_WRAPPERS_WRITE_VISIBLE,
    );
  }

  return $wrappers;
}

/**
 * Implements hook_flysystem_plugins().
 */
function flysystem_flysystem_plugins() {
  $plugins = array(
    'null' => array(
      'class' => 'Drupal\flysystem\Flysystem\Null',
    ),
    'local' => array(
      'class' => 'Drupal\flysystem\Flysystem\Local',
    ),
  );

  if (extension_loaded('ftp')) {
    $plugins['ftp']['class'] = 'Drupal\flysystem\Flysystem\Ftp';
  }

  return $plugins;
}

/**
 * Returns a plugin instance.
 *
 * @param string $id
 *   The plugin id.
 * @param array $configuration
 *   (optional) The plugin configuration array.
 *
 * @return FlysystemPluginInterface|false
 *   A flysystem plugin, or false on failure.
 */
function flysystem_get_plugin($id, array $configuration = array()) {
  $plugins = _flysystem_get_plugins();

  if (isset($plugins[$id]) && class_exists($plugins[$id]['class'])) {
    $configuration = drupal_array_merge_deep($plugins[$id]['defaults'], $configuration);
    return $plugins[$id]['factory']($plugins[$id]['class'], $configuration);
  }

  // We couldn't find the plugin.
  watchdog('flysystem', t('Unable to find the plugin: @id', array('@id' => $id)), WATCHDOG_ALERT);

  // Avoid infinite loop.
  if ($id === 'null') {
    return FALSE;
  }

  return flysystem_get_plugin('null');
}

function _flysystem_get_plugins() {
  $plugins =& drupal_static(__FUNCTION__, NULL);

  if (isset($plugins)) {
    return $plugins;
  }

  $defaults = array(
    'defaults' => array(),
    'factory' => 'flysystem_create_plugin_instance',
  );

  $plugins = module_invoke_all('flysystem_plugins');
  foreach (array_keys($plugins) as $id) {
    $plugins[$id] += $defaults;
  }

  return $plugins;
}

/**
 * Default factory for plugins.
 *
 * @return FlysystemPluginInterface
 *   A new Flysystem plugin.
 */
function flysystem_create_plugin_instance($class, array $configuration) {
  return new $class($configuration);
}

