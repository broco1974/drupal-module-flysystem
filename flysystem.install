<?php

/**
 * @file
 * Install, update, enable hooks for flysystem.module.
 */

/**
 * Implements hook_requirements().
 */
function flysystem_requirements($phase) {
  $requirements = array();

  if ($phase !== 'runtime') {
    return $requirements;
  }

  $dependencies = array(
    'League\Flysystem\Filesystem' => t('Flysystem'),
    'League\Flysystem\Cached\CachedAdapter' => t('cache adapter'),
    'League\Flysystem\Replicate\ReplicateAdapter' => t('replicate adapter'),
    'Twistor\FlysystemStreamWrapper' => t('stream wrapper'),
  );

  $missing = array_filter(array_map(function ($dependency) use ($dependencies) {
    return class_exists($dependency) ? FALSE : $dependencies[$dependency];
  }, array_keys($dependencies)));

  if ($missing) {
    $requirements['flysystem_dependencies'] = array(
      'title' => t('Flysystem'),
      'description' => t('Dependencies missing: @deps.', array('@deps' => implode(', ', $missing))),
      'severity' => REQUIREMENT_ERROR,
    );

    // Things will most likely be broken, so don't continue.
    return $requirements;
  }

  foreach (flysystem_factory()->ensure() as $scheme => $errors) {
    foreach ($errors as $error) {
      $requirements['flysystem:' . $scheme] = array(
        'title' => t('Flysystem: @scheme', array('@scheme' => $scheme)),
        'description' => t($error['message'], $error['context']),
        'severity' => _flysystem_convert_watchdog_to_requirements($error['severity']),
      );
    }
  }

  return $requirements;
}

/**
 * Converts from watchdog to hook_requirements values.
 *
 * @param int $severity
 *   The severity according to watchdog().
 *
 * @return int
 *   An appropriate value for hook_requirements.
 */
function _flysystem_convert_watchdog_to_requirements($severity) {
  if ($level <= WATCHDOG_ERROR) {
    return REQUIREMENT_ERROR;
  }

  if ($level == WATCHDOG_WARNING) {
    return REQUIREMENT_WARNING;
  }

  if ($level == WATCHDOG_NOTICE || $level == WATCHDOG_INFO) {
    return REQUIREMENT_INFO;
  }

  return REQUIREMENT_OK;
}
